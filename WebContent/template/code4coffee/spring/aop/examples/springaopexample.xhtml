<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui">

<h:head>

	



</h:head>


<body onload="prettyPrint()">



	<h2>Application Context DAO File</h2>
	<div style="border: 1px solid black;">
		<pre class="prettyprint">
<code class="language-java">

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"&gt;


&lt;bean id="dataSource"
class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
&lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
&lt;property name="url"
value="jdbc:mysql://localhost:3306/bankofviz" /&gt;
&lt;property name="username" value="root" /&gt;
&lt;property name="password" value="junaid123" /&gt;
&lt;/bean&gt;


&lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;
    &lt;property name="dataSource" ref-bean="dataSource"&gt;&lt;/property&gt;
&lt;/bean&gt;


&lt;bean id="sinanDao" 
    class="com.junaid.training.springjdbc.JdbcBankOfVizDaoImpl"&gt;

&lt;property name="dataSource" ref="dataSource" /&gt;
&lt;/bean&gt;
&lt;/beans&gt;
		
</code>
</pre>

	</div>




	<h2>What is JdbcTemplate ?</h2>

	<div id="result">

		<p>
			Spring Ships with Custom templates to make development easier.
			JDBCTemplate is a Spring Framework class that is used to query the
			DB. JdBCTemplate needs to be injected the DataSource information.(In
			our case MySQL). <br></br>We can then inject the JdbcTemplate into
			our own classes.

		</p>
	</div>





	<h2>Spring JDBC Core Class</h2>
	<div style="border: 1px solid black;">
		<pre class="prettyprint">
	<code class="language-java">


package com.junaid.training.springjdbc;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import com.bov.dto.User;

public class SpringJdbcExplained {
	
	public static void main(String args[]){
	
	ApplicationContext daoContext =
			new ClassPathXmlApplicationContext("applicationContext-dao.xml");
		BankOfVizDao jdbcDao=(BankOfVizDao)daoContext.getBean("sinanDao");
		//Populate the user here 
		User user=new User();
		user.setId(7);
		user.setUserName("Junaid");
		user.setPassword("Training");
		jdbcDao.insert(user);
		
	System.out.println("Retrieving user from JdbcTemplate " +jdbcDao.findUserById(1).getUserName());
		
	}

}



</code>
</pre>
	</div>





	<div id="result">

		<p>
			We load the Application context file and retrieve the bean of
			interest. ( In our case sinanDao). We then create a User Object and
			insert into DB using the JdbcDao class. <br></br> JdbcDao uses the
			JdbcTemplate that already has a dataSource injected into it to query
			the DB for us.

		</p>
	</div>
	<div id="result">
		<h2>User is a Simple POJO/Java Bean</h2>
		<p></p>
	</div>

	<div style="border: 1px solid black;">
		<pre class="prettyprint">
<code class="language-java">

package com.junaid.training.springjdbc;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.sql.DataSource;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import com.bov.dto.User;

public class JdbcBankOfVizDaoImpl  implements BankOfVizDao{
	
	private DataSource dataSource;
	
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
		}
	
	/**
	 * The below is also an example of inner methods 
	 */
	public void insert(final User usr) {
		JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
		String sql = "INSERT INTO user (id, username, password) "
			+ "VALUES (?, ?, ?)";
		
		jdbcTemplate.update(sql, new PreparedStatementSetter() {
			public void setValues(PreparedStatement ps)
			throws SQLException {
			ps.setInt(1, usr.getId());
			ps.setString(2, usr.getUserName());
			ps.setString(3, usr.getPassword());
			
			}
			});
		
		
	}
	
	/**
	 * Bean Row Mapper will automatically map all your TAble columns to Bean properties
	 * :) JDBCTemplate makes this happen
	 */
	
	public User findUserById(int id){
		String sql = "SELECT * FROM user WHERE id = ?";
		JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);
		User usr = (User) jdbcTemplate.queryForObject(sql,new Object[] { id } ,new BeanPropertyRowMapper(User.class));
		return usr;
	}
}




	
</code>
</pre>

	</div>




	<div id="result">

		<p>There are 2 methods above.insert will insert the values in the
			DB using JdbcTemplate and findUserById will retrieve a single row
			based on int id in the parameter.</p>
	</div>



<div id="imagesnap">
<h2>These are some of the Libraries you need in classPath</h2>
    <p:graphicImage library="images/spring/jdbc" name="1.png" alt="Some of the Jars you need" title="Some of the Jars you need"/>
</div>



	<p:dialog modal="true" widgetVar="statusDialog" header="Status"
		draggable="false" closable="false">
		<p:graphicImage library="images" name="ajaxloadingbar.gif"></p:graphicImage>
	</p:dialog>

	<h:form>

		<h:panelGrid columns="2" cellpadding="5">
			<p:commandButton value="Download Source" ajax="false"
				action="#{fileBean.downloadAction(springjdbc)}">
				<f:param name="filename" value="springjdbc" />
				<p:fileDownload value="#{fileBean.downloadFile}" />
			</p:commandButton>
		</h:panelGrid>


	</h:form>

	<div id="disqus_thread"></div>
	<script type="text/javascript">
		var disqus_shortname = 'willcode4coffee';
		(function() {
			var dsq = document.createElement('script');
			dsq.type = 'text/javascript';
			dsq.async = true;
			dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
			(document.getElementsByTagName('head')[0] || document
					.getElementsByTagName('body')[0]).appendChild(dsq);
		})();
	</script>
	<noscript>
		Please enable JavaScript to view the <a
			href="https://disqus.com/?ref_noscript" rel="nofollow">comments
			powered by Disqus.</a>
	</noscript>




</body>

</html>


